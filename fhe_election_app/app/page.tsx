"use client";

import { useEffect, useMemo, useState } from "react";
import { BrowserProvider, Contract, JsonRpcProvider } from "ethers";
import { Bar } from "react-chartjs-2";
import Link from "next/link";
import { useWallet } from "../hooks/useWallet";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title as ChartTitle,
  Tooltip,
  Legend,
} from "chart.js";

ChartJS.register(CategoryScale, LinearScale, BarElement, ChartTitle, Tooltip, Legend);

type DeployedInfo = { address: `0x${string}`; abi: any };

async function fetchDeployment(): Promise<DeployedInfo | null> {
  try {
    // ‰ºòÂÖà‰ΩøÁî® sepoliaÔºåÂÖ∂Ê¨°ÂõûÈÄÄÂà∞ localhost
    const tryPaths = [
      "deployments/sepolia/CryptoReferendum.json",
      "deployments/localhost/CryptoReferendum.json",
    ];
    for (const p of tryPaths) {
      const res = await fetch(p).catch(() => null);
      if (res && res.ok) {
        const j = await res.json();
        return { address: j.address, abi: j.abi };
      }
    }
    return null;
  } catch {
    return null;
  }
}

export default function HomePage() {
  const { account, chainId, isConnected, fhevm, provider } = useWallet();
  const [deployment, setDeployment] = useState<DeployedInfo | null>(null);

  const [title, setTitle] = useState("");
  const [desc, setDesc] = useState("");
  const [opts, setOpts] = useState<string>("ËµûÊàê,ÂèçÂØπ");
  const [deadlineSec, setDeadlineSec] = useState<number>(() => Math.floor(Date.now() / 1000) + 3600);
  const [refCount, setRefCount] = useState<number>(0);

  const [selectedRef, setSelectedRef] = useState<number>(0);
  const [meta, setMeta] = useState<{ 
    title: string; 
    description: string; 
    options: string[]; 
    deadline: number; 
    finalized: boolean; 
    publicResult: boolean;
    encryptedTallies?: any[];
  } | null>(null);
  const [publicCounts, setPublicCounts] = useState<number[] | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [message, setMessage] = useState<string>("");

  useEffect(() => {
    (async () => {
      const dep = await fetchDeployment();
      setDeployment(dep);
    })();
  }, []);

  useEffect(() => {
    if (deployment) {
      refreshCount();
    }
  }, [deployment]);

  const contractRW = useMemo(() => {
    if (!deployment || !provider) return undefined;
    return new Contract(deployment.address, deployment.abi, provider);
  }, [deployment, provider]);

  const createReferendum = async () => {
    if (!contractRW || !deployment) return;
    setIsLoading(true);
    setMessage("ÂàõÂª∫ÂÖ¨Êäï‰∏≠...");
    
    try {
      const signer = await provider!.getSigner();
      const writable = contractRW.connect(signer) as any;
      const options = opts.split(",").map((s) => s.trim()).filter(Boolean);
      const tx = await (writable as any).createReferendum(title, desc, options, BigInt(deadlineSec), true);
      setMessage("Á≠âÂæÖ‰∫§ÊòìÁ°ÆËÆ§...");
      await tx.wait();
      setMessage("ÂÖ¨ÊäïÂàõÂª∫ÊàêÂäüÔºÅ");
      
      // Ê∏ÖÈô§ÊâÄÊúâÊóßÁöÑÊäïÁ•®Áä∂ÊÄÅÔºåÂõ†‰∏∫ËøôÊòØÊñ∞ÁöÑÂÖ¨Êäï
      if (account) {
        // Ê∏ÖÈô§localStorage‰∏≠ÁöÑÊäïÁ•®ËÆ∞ÂΩï
        Object.keys(localStorage).forEach(key => {
          if (key.startsWith(`voted_${account}_`) || key.startsWith(`voted_option_${account}_`)) {
            localStorage.removeItem(key);
          }
        });
        console.log('Â∑≤Ê∏ÖÈô§ÊóßÁöÑÊäïÁ•®Áä∂ÊÄÅ');
      }
      
      await refreshCount();
      setTitle("");
      setDesc("");
      setOpts("ËµûÊàê,ÂèçÂØπ");
    } catch (error: any) {
      setMessage(`ÂàõÂª∫Â§±Ë¥•: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  const refreshCount = async () => {
    if (!deployment) return;
    try {
      // ‰ΩøÁî®Âè™ËØªproviderËÄå‰∏çÊòØ‰æùËµñÈí±ÂåÖËøûÊé•
      const readOnlyProvider = new BrowserProvider((window as any).ethereum || new JsonRpcProvider("http://127.0.0.1:8545"));
      const readOnlyContract = new Contract(deployment.address, deployment.abi, readOnlyProvider);
      const c = await readOnlyContract.referendumCount();
      setRefCount(Number(c));
    } catch (error: any) {
      setMessage(`Âà∑Êñ∞Â§±Ë¥•: ${error.message}`);
    }
  };


  const loadMeta = async () => {
    if (!contractRW || !deployment || !isConnected) {
      setMessage("ËØ∑ÂÖàËøûÊé•Èí±ÂåÖ");
      return;
    }
    
    if (selectedRef >= refCount) {
      setMessage(`ÂÖ¨Êäï ${selectedRef} ‰∏çÂ≠òÂú®ÔºåÂΩìÂâçÊÄªÊï∞: ${refCount}`);
      return;
    }
    
    setIsLoading(true);
    setMessage("Ê≠£Âú®Ëé∑ÂèñÂÖ¨Êäï‰ø°ÊÅØÔºåËØ∑Á≠æÂêçÁ°ÆËÆ§...");
    
    try {
      const signer = await provider!.getSigner();
      const writable = contractRW.connect(signer) as any;
      
      // Ë∞ÉÁî®ÂêàÁ∫¶Ëé∑ÂèñÂÖ¨ÊäïÂÖÉ‰ø°ÊÅØÔºàÈúÄË¶ÅÁ≠æÂêçÔºâ
      const [t, d, ops, deadline, finalized, pub] = await (writable as any).getReferendumMeta(BigInt(selectedRef));
      
      setMessage("Ê≠£Âú®Ëé∑ÂèñÂä†ÂØÜËÆ°Á•®Êï∞ÊçÆ...");
      // Ëé∑ÂèñÂä†ÂØÜÁöÑËÆ°Á•®‰ø°ÊÅØ
      const encryptedTallies = await (writable as any).getEncryptedTallies(BigInt(selectedRef));
      console.log('getEncryptedTallies result:', encryptedTallies);
      
      setMeta({ 
        title: t, 
        description: d, 
        options: ops, 
        deadline: Number(deadline), 
        finalized, 
        publicResult: pub,
        encryptedTallies: encryptedTallies
      });
      setMessage(`ÂÖ¨Êäï ${selectedRef} Âä†ÂØÜ‰ø°ÊÅØÂä†ËΩΩÊàêÂäüÔºÅ`);
    } catch (error: any) {
      console.error("loadMeta error:", error);
      if (error.message.includes("invalid refId")) {
        setMessage(`ÂÖ¨Êäï ${selectedRef} ‰∏çÂ≠òÂú®ÔºåËØ∑ÂÖàÂàõÂª∫ÂÖ¨ÊäïÊàñÈÄâÊã©ÊúâÊïàÁöÑÂÖ¨ÊäïID`);
      } else {
        setMessage(`Âä†ËΩΩÂ§±Ë¥•: ${error.message}`);
      }
      setMeta(null);
    } finally {
      setIsLoading(false);
    }
  };

  const finalizeReferendum = async () => {
    console.log('finalizeReferendum called', { contractRW: !!contractRW, deployment: !!deployment });
    if (!contractRW || !deployment) {
      console.log('Missing dependencies, returning early');
      return;
    }
    setIsLoading(true);
    setMessage("ÁªìÊùüÂÖ¨Êäï‰∏≠...");
    
    // Ê£ÄÊü•ÁΩëÁªúËøûÊé•
    try {
      const network = await provider!.getNetwork();
      console.log('ÂΩìÂâçÁΩëÁªú:', { chainId: network.chainId, name: network.name });
      
      if (Number(network.chainId) !== 31337) {
        setMessage(`ÁΩëÁªúÈîôËØØ: ÂΩìÂâçÁΩëÁªúID ${network.chainId}ÔºåÈúÄË¶Å 31337 (Hardhat)`);
        setIsLoading(false);
        return;
      }
    } catch (error) {
      console.error('ÁΩëÁªúÊ£ÄÊü•Â§±Ë¥•:', error);
      setMessage('ÁΩëÁªúËøûÊé•Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü• MetaMask ËøûÊé•');
      setIsLoading(false);
      return;
    }
    
    try {
      console.log('ÂáÜÂ§áË∞ÉÁî®ÂêàÁ∫¶...');
      const signer = await provider!.getSigner();
      console.log('Ëé∑ÂèñÂà∞Á≠æÂêçËÄÖ:', await signer.getAddress());
      
      const writable = contractRW.connect(signer) as any;
      console.log('ÂáÜÂ§áË∞ÉÁî® finalize ÊñπÊ≥ï...');
      
      const tx = await (writable as any).forceFinalize(BigInt(selectedRef));
      console.log('‰∫§ÊòìÂ∑≤ÂèëÈÄÅ:', tx.hash);
      setMessage("Á≠âÂæÖ‰∫§ÊòìÁ°ÆËÆ§...");
      
      await tx.wait();
      console.log('‰∫§ÊòìÂ∑≤Á°ÆËÆ§');
      setMessage(`ÂÖ¨Êäï ${selectedRef} Â∑≤ÁªìÊùüÔºÅ`);
      // Âà∑Êñ∞ÂÖ¨Êäï‰ø°ÊÅØ
      await loadMeta();
    } catch (error: any) {
      console.error('ÁªìÊùüÂÖ¨ÊäïÂ§±Ë¥•:', error);
      setMessage(`ÁªìÊùüÂÖ¨ÊäïÂ§±Ë¥•: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  };


  const decryptRealResults = async () => {
    console.log('decryptRealResults called', { deployment: !!deployment, contractRW: !!contractRW, provider: !!provider });
    if (!deployment || !contractRW || !provider) {
      console.log('Missing dependencies, returning early');
      return;
    }
    setIsLoading(true);
    setMessage("Ëß£ÂØÜÁúüÂÆûÊäïÁ•®ÁªìÊûú‰∏≠...");
    
    try {
      const signer = await provider.getSigner();
      const writableContract = contractRW.connect(signer) as any;
      
      // Ëé∑ÂèñÂÖ¨ÊäïÂÖÉ‰ø°ÊÅØ
      const [t, d, ops, deadline, finalized, pub] = await (writableContract as any).getReferendumMeta(BigInt(selectedRef));
      const m: { title: string; description: string; options: string[]; deadline: number; finalized: boolean; publicResult: boolean } = {
        title: t as string,
        description: d as string,
        options: ops as string[],
        deadline: Number(deadline),
        finalized: finalized as boolean,
        publicResult: pub as boolean,
      };
      
      console.log('ÂÖ¨ÊäïÁä∂ÊÄÅÊ£ÄÊü•:', { finalized: m.finalized, publicResult: m.publicResult });
      
      if (!m.publicResult) {
        console.log('ÂÖ¨ÊäïÊú™ÂºÄÊîæÂÖ¨ÂºÄËß£ÂØÜÔºåËøîÂõû');
        setMessage("Êú¨ÂÖ¨ÊäïÊú™ÂºÄÊîæÂÖ¨ÂºÄËß£ÂØÜ");
        return;
      }
      
      if (!m.finalized) {
        console.log('ÂÖ¨ÊäïËøõË°å‰∏≠ÔºåÊó†Ê≥ïËß£ÂØÜÁúüÂÆûÁªìÊûúÔºåËøîÂõû');
        setMessage("ÂÖ¨ÊäïËøõË°å‰∏≠ÔºåÊó†Ê≥ïËß£ÂØÜÁúüÂÆûÁªìÊûú„ÄÇËØ∑ÂÖàÁªìÊùüÂÖ¨Êäï„ÄÇ");
        return;
      }
      
      console.log('ÂºÄÂßãËß£ÂØÜÁúüÂÆûÊäïÁ•®ÁªìÊûú...');
      
      // Áõ¥Êé•Ë∞ÉÁî®ÂêàÁ∫¶Ëé∑ÂèñÁúüÂÆûÊäïÁ•®ËÆ°Êï∞ÔºàÁé∞Âú®ÊòØviewÂáΩÊï∞Ôºå‰∏çÈúÄË¶ÅÁ≠æÂêçÔºâ
      const readOnlyProvider = new JsonRpcProvider("http://127.0.0.1:8545");
      const readOnlyContract = new Contract(deployment.address, deployment.abi, readOnlyProvider);
      
      const realResults = await readOnlyContract.decryptAllResults(BigInt(selectedRef));
      console.log('ÂêàÁ∫¶ËøîÂõûÁöÑÁúüÂÆûÊäïÁ•®ÁªìÊûú:', realResults);
      
      // ËΩ¨Êç¢‰∏∫Êï∞Â≠óÊï∞ÁªÑ
      const counts = Array.from(realResults).map((result: any) => Number(result));
      
      setPublicCounts(counts);
      setMessage(`üéâ ÂÖ¨Êäï ${selectedRef} ÁúüÂÆûÁªìÊûúËß£ÂØÜÊàêÂäüÔºÅÊÄªÁ•®Êï∞: ${counts.reduce((a, b) => a + b, 0)}
      
ÁúüÂÆûÊäïÁ•®ÁªìÊûú:
${m.options.map((option, index) => `${option}: ${counts[index]} Á•®`).join('\n')}`);
      
    } catch (error: any) {
      console.error('Ëß£ÂØÜÁúüÂÆûÁªìÊûúÂ§±Ë¥•:', error);
      setMessage(`Ëß£ÂØÜÂ§±Ë¥•: ${error.message}`);
      setPublicCounts(null);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-purple-50">
      {/* Header */}
      <div className="bg-white/80 backdrop-blur-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-800">ÁÆ°ÁêÜ‰∏≠ÂøÉ</h1>
              <p className="text-gray-600 mt-1">ÂàõÂª∫ÂÖ¨Êäï„ÄÅÊü•ÁúãÁªüËÆ°Êï∞ÊçÆ</p>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 py-8">
        {/* Status Message */}
        {message && (
          <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-xl">
            <div className="flex items-center">
              {isLoading && (
                <div className="w-4 h-4 border-2 border-blue-600 border-t-transparent rounded-full animate-spin mr-3"></div>
              )}
              <p className="text-blue-800">{message}</p>
            </div>
          </div>
        )}

        {/* Contract Info */}
        <div className="mb-8 card">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-lg font-semibold text-gray-800">ÂêàÁ∫¶‰ø°ÊÅØ</h2>
              <p className="text-gray-600 text-sm">Âú∞ÂùÄ: {deployment?.address ?? "Êú™ÈÉ®ÁΩ≤"}</p>
            </div>
            <div className="flex items-center space-x-4">
              <Link href="/vote" className="btn-primary text-sm py-2 px-4">
                üó≥Ô∏è ÂéªÊäïÁ•®
              </Link>
              <button onClick={refreshCount} className="btn-secondary text-sm py-2 px-4">
                Âà∑Êñ∞
              </button>
              <div className="text-right">
                <div className="text-2xl font-bold text-gray-800">{refCount}</div>
                <div className="text-sm text-gray-600">ÂÖ¨ÊäïÊÄªÊï∞</div>
              </div>
            </div>
          </div>
        </div>

        <div className="grid lg:grid-cols-2 gap-8">
          {/* Create Referendum */}
          <div className="card-gradient">
            <div className="flex items-center mb-6">
              <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg flex items-center justify-center mr-3">
                <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                </svg>
              </div>
              <h2 className="text-xl font-semibold text-gray-800">ÂèëËµ∑ÂÖ¨Êäï</h2>
            </div>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Ê†áÈ¢ò</label>
                <input
                  className="input-field"
                  placeholder="ËØ∑ËæìÂÖ•ÂÖ¨ÊäïÊ†áÈ¢ò"
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">ÁÆÄ‰ªã</label>
                <textarea
                  className="input-field resize-none h-20"
                  placeholder="ËØ∑ËæìÂÖ•ÂÖ¨ÊäïÁÆÄ‰ªã"
                  value={desc}
                  onChange={(e) => setDesc(e.target.value)}
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">ÈÄâÈ°π</label>
                <input
                  className="input-field"
                  placeholder="ÈÄâÈ°πÔºåÁî®ÈÄóÂè∑ÂàÜÈöî"
                  value={opts}
                  onChange={(e) => setOpts(e.target.value)}
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Êà™Ê≠¢Êó∂Èó¥</label>
                <input
                  className="input-field"
                  type="datetime-local"
                  value={new Date(deadlineSec * 1000).toISOString().slice(0, 16)}
                  onChange={(e) => setDeadlineSec(Math.floor(new Date(e.target.value).getTime() / 1000))}
                />
              </div>
              
              <div className="space-y-3">
                <button
                  onClick={createReferendum}
                  disabled={isLoading || !isConnected || !title.trim() || !desc.trim()}
                  className="btn-primary w-full"
                >
                  ÂàõÂª∫ÂÖ¨Êäï
                </button>
                       <button
                         onClick={async () => {
                           setTitle("ÊµãËØïÂÖ¨Êäï");
                           setDesc("ËøôÊòØ‰∏Ä‰∏™ÊµãËØïÂÖ¨Êäï");
                           setOpts("ËµûÊàê,ÂèçÂØπ");
                           // ËÆæÁΩÆ1ÂàÜÈíüÂêéÊà™Ê≠¢Ôºå‰æø‰∫éÊµãËØï
                           setDeadlineSec(Math.floor(Date.now() / 1000) + 60);
                           setTimeout(() => createReferendum(), 100);
                         }}
                         disabled={isLoading || !isConnected}
                         className="btn-secondary w-full text-sm"
                       >
                         üöÄ Âø´ÈÄüÂàõÂª∫ÊµãËØïÂÖ¨Êäï (1ÂàÜÈíüÂêéÊà™Ê≠¢)
                       </button>
              </div>
            </div>
          </div>

          {/* Quick Actions */}
          <div className="card-gradient">
            <div className="flex items-center mb-6">
              <div className="w-8 h-8 bg-gradient-to-r from-green-500 to-blue-500 rounded-lg flex items-center justify-center mr-3">
                <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                </svg>
              </div>
              <h2 className="text-xl font-semibold text-gray-800">Âø´ÈÄüÊìç‰Ωú</h2>
            </div>
            
            <div className="space-y-4">
              <div className="p-4 bg-blue-50 rounded-xl border border-blue-200">
                <h3 className="font-semibold text-blue-800 mb-2">üó≥Ô∏è ÂèÇ‰∏éÊäïÁ•®</h3>
                <p className="text-sm text-blue-700 mb-3">
                  Êü•ÁúãÊâÄÊúâÂÖ¨ÊäïÂπ∂ËøõË°åÊäïÁ•®Ôºå‰∫´ÂèóÂÆåÂÖ®ÂåøÂêçÁöÑÊäïÁ•®‰ΩìÈ™å
                </p>
                <Link href="/vote" className="btn-primary w-full text-center block">
                  ÂâçÂæÄÊäïÁ•®‰∏≠ÂøÉ
                </Link>
              </div>
              
              <div className="p-4 bg-purple-50 rounded-xl border border-purple-200">
                <h3 className="font-semibold text-purple-800 mb-2">üìä Êü•ÁúãÁªìÊûú</h3>
                <p className="text-sm text-purple-700 mb-3">
                  Êü•ÁúãÂ∑≤ÁªìÊùüÂÖ¨ÊäïÁöÑÁªüËÆ°ÁªìÊûúÂíåÊï∞ÊçÆÂàÜÊûê
                </p>
                <div className="grid grid-cols-2 gap-2">
                  <input
                    className="input-field text-sm"
                    type="number"
                    placeholder="ÂÖ¨ÊäïID"
                    value={selectedRef}
                    onChange={(e) => setSelectedRef(Number(e.target.value))}
                  />
                  <button
                    onClick={loadMeta}
                    disabled={isLoading}
                    className="btn-secondary text-sm"
                  >
                    Êü•ÁúãËØ¶ÊÉÖ
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Results Section */}
        <div className="mt-8 card-gradient">
          <div className="flex items-center mb-6">
            <div className="w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg flex items-center justify-center mr-3">
              <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
              </svg>
            </div>
            <h2 className="text-xl font-semibold text-gray-800">ÁªìÊûúÁªüËÆ°</h2>
          </div>
          
          <div className="grid md:grid-cols-3 gap-4">
            <div>
              <button 
                onClick={() => {
                  console.log("Button clicked!");
                  console.log("Current states:", {
                    isLoading,
                    selectedRef,
                    isConnected,
                    contractRW: !!contractRW,
                    deployment: !!deployment
                  });
                  loadMeta();
                }} 
                disabled={isLoading || selectedRef < 0} 
                className="btn-secondary w-full"
              >
                Âä†ËΩΩÂÖ¨ÊäïËØ¶ÊÉÖ
              </button>
              <p className="text-xs text-gray-500 mt-1">
                ÂÖ¨ÊäïID: {selectedRef} | ÊÄªÊï∞: {refCount} | 
                {selectedRef >= refCount ? "‚ùå ‰∏çÂ≠òÂú®" : "‚úÖ Â≠òÂú®"}
              </p>
            </div>
            <div>
              <button 
                onClick={() => {
                  console.log('ÁªìÊùüÂÖ¨ÊäïÊåâÈíÆË¢´ÁÇπÂáª', { 
                    isLoading, 
                    selectedRef, 
                    isConnected, 
                    contractRW: !!contractRW, 
                    metaFinalized: meta?.finalized 
                  });
                  finalizeReferendum();
                }} 
                disabled={isLoading || selectedRef < 0 || !isConnected || !contractRW || !!(meta && meta.finalized)} 
                className="btn-warning w-full"
              >
                Âº∫Âà∂ÁªìÊùüÂÖ¨Êäï
              </button>
              <p className="text-xs text-gray-500 mt-1">
                Âº∫Âà∂ÁªìÊùüÂÖ¨ÊäïÔºà‰∏çÊ£ÄÊü•Êà™Ê≠¢Êó∂Èó¥Ôºâ
                <br />
                <span className="text-red-500">
                  Áä∂ÊÄÅ: {isLoading ? 'Âä†ËΩΩ‰∏≠' : ''} 
                  {selectedRef < 0 ? 'ÂÖ¨ÊäïIDÊó†Êïà' : ''} 
                  {!isConnected ? 'Èí±ÂåÖÊú™ËøûÊé•' : ''} 
                  {!contractRW ? 'ÂêàÁ∫¶Êú™ÂàùÂßãÂåñ' : ''} 
                  {meta?.finalized ? 'ÂÖ¨ÊäïÂ∑≤ÁªìÊùü' : ''}
                </span>
              </p>
            </div>
            <div>
              <button 
                onClick={() => {
                  console.log('Ëß£ÂØÜÁúüÂÆûÁªìÊûúÊåâÈíÆË¢´ÁÇπÂáª', { isLoading, selectedRef, isConnected });
                  decryptRealResults();
                }} 
                disabled={isLoading || selectedRef < 0} 
                className="btn-primary w-full"
              >
                üîì Ëß£ÂØÜÊäïÁ•®ÁªìÊûú
              </button>
              <p className="text-xs text-gray-500 mt-1">
                Ëß£ÂØÜÂπ∂ÊòæÁ§∫ÁúüÂÆûÁöÑÊäïÁ•®Êï∞Â≠ó
                <br />
                <span className="text-red-500">ÈúÄË¶ÅÂÖ¨ÊäïÂ∑≤ÁªìÊùü‰∏îÁªìÊûúÂÖ¨ÂºÄ</span>
              </p>
            </div>
          </div>
        </div>

        {/* Meta Information */}
        {meta && (
          <div className="mt-6 card animate-fade-in">
            <h3 className="text-lg font-semibold text-gray-800 mb-4">ÂÖ¨ÊäïËØ¶ÊÉÖ (Âä†ÂØÜÊï∞ÊçÆ)</h3>
            <div className="grid md:grid-cols-2 gap-4">
              <div>
                <div className="text-sm text-gray-600">Ê†áÈ¢ò</div>
                <div className="font-medium text-gray-800">{meta.title}</div>
              </div>
              <div>
                <div className="text-sm text-gray-600">Áä∂ÊÄÅ</div>
                <div>
                  <span className={meta.finalized ? "status-ended" : "status-active"}>
                    {meta.finalized ? "Â∑≤ÁªìÊùü" : "ËøõË°å‰∏≠"}
                  </span>
                </div>
              </div>
                     <div>
                       <div className="text-sm text-gray-600">Êà™Ê≠¢Êó∂Èó¥</div>
                       <div className="font-medium text-gray-800">{new Date(meta.deadline * 1000).toLocaleString()}</div>
                       <div className="text-xs text-gray-500 mt-1">
                         {meta.deadline > Math.floor(Date.now() / 1000) ? 
                           `ËøòÊúâ ${Math.floor((meta.deadline - Math.floor(Date.now() / 1000)) / 60)} ÂàÜÈíü` : 
                           'Â∑≤ËøáÊà™Ê≠¢Êó∂Èó¥'
                         }
                       </div>
                     </div>
              <div>
                <div className="text-sm text-gray-600">ÁªìÊûúÂÖ¨ÂºÄ</div>
                <div>
                  <span className={meta.publicResult ? "status-active" : "status-ended"}>
                    {meta.publicResult ? "ÊòØ" : "Âê¶"}
                  </span>
                </div>
              </div>
              <div className="md:col-span-2">
                <div className="text-sm text-gray-600">ÁÆÄ‰ªã</div>
                <div className="font-medium text-gray-800">{meta.description}</div>
              </div>
              <div className="md:col-span-2">
                <div className="text-sm text-gray-600">ÈÄâÈ°π</div>
                <div className="flex flex-wrap gap-2 mt-1">
                  {meta.options.map((option, index) => (
                    <span key={index} className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">
                      {index}: {option}
                    </span>
                  ))}
                </div>
              </div>
              
              {/* Âä†ÂØÜÊï∞ÊçÆÂ±ïÁ§∫ */}
              {meta.encryptedTallies && Array.isArray(meta.encryptedTallies) && meta.encryptedTallies.length > 0 && (
                <div className="md:col-span-2">
                  <div className="text-sm text-gray-600 mb-2">Âä†ÂØÜËÆ°Á•®Êï∞ÊçÆ</div>
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <div className="text-xs text-gray-500 mb-2">ÂêÑÈÄâÈ°πÂä†ÂØÜÁ•®Êï∞:</div>
                    {meta.encryptedTallies.map((tally, index) => (
                      <div key={index} className="text-xs font-mono text-gray-700 mb-1">
                        ÈÄâÈ°π {index}: {JSON.stringify(tally).substring(0, 50)}...
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              {/* Â¶ÇÊûúÊ≤°ÊúâÂä†ÂØÜÊï∞ÊçÆÔºåÊòæÁ§∫ÊèêÁ§∫ */}
              {meta.encryptedTallies && (!Array.isArray(meta.encryptedTallies) || meta.encryptedTallies.length === 0) && (
                <div className="md:col-span-2">
                  <div className="text-sm text-gray-600 mb-2">Âä†ÂØÜËÆ°Á•®Êï∞ÊçÆ</div>
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <div className="text-xs text-gray-500">ÊöÇÊó†Âä†ÂØÜÊï∞ÊçÆÊàñÊï∞ÊçÆÊ†ºÂºèÈîôËØØ</div>
                    <div className="text-xs text-gray-400 mt-1">
                      Êï∞ÊçÆÁ±ªÂûã: {typeof meta.encryptedTallies} | 
                      ÊòØÂê¶‰∏∫Êï∞ÁªÑ: {Array.isArray(meta.encryptedTallies) ? 'ÊòØ' : 'Âê¶'}
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Chart */}
        {meta && publicCounts && (
          <div className="mt-6 card animate-fade-in">
            <h3 className="text-lg font-semibold text-green-600 mb-4">üîì ÁúüÂÆûÊäïÁ•®ÁªìÊûú</h3>
            <div className="h-80">
              <Bar
                data={{
                  labels: meta.options,
                  datasets: [
                    {
                      label: "ÁúüÂÆûÁ•®Êï∞",
                      data: publicCounts,
                      backgroundColor: "rgba(34, 197, 94, 0.6)",
                      borderColor: "rgba(34, 197, 94, 1)",
                      borderWidth: 2,
                      borderRadius: 8,
                    },
                  ],
                }}
                options={{
                  responsive: true,
                  maintainAspectRatio: false,
                  plugins: {
                    legend: {
                      display: false,
                    },
                    tooltip: {
                      backgroundColor: "rgba(0, 0, 0, 0.8)",
                      titleColor: "white",
                      bodyColor: "white",
                      cornerRadius: 8,
                    },
                  },
                  scales: {
                    y: {
                      beginAtZero: true,
                      ticks: {
                        precision: 0,
                        color: "#6b7280",
                      },
                      grid: {
                        color: "#f3f4f6",
                      },
                    },
                    x: {
                      ticks: {
                        color: "#6b7280",
                      },
                      grid: {
                        display: false,
                      },
                    },
                  },
                }}
              />
            </div>
            <div className="mt-4 flex justify-center">
              <div className="text-sm text-gray-600">
                ÊÄªÁ•®Êï∞: {publicCounts.reduce((a, b) => a + b, 0)}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}