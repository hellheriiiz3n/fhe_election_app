/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CryptoReferendumInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "castVote"
      | "createReferendum"
      | "decryptAllResults"
      | "decryptViewTallies"
      | "finalize"
      | "forceFinalize"
      | "getEncryptedOptionCount"
      | "getEncryptedTallies"
      | "getReferendumMeta"
      | "protocolId"
      | "referendumCount"
      | "requestDecryptAllResults"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DataAccessed"
      | "ReferendumCreated"
      | "ReferendumFinalized"
      | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createReferendum",
    values: [string, string, string[], BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "decryptAllResults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decryptViewTallies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceFinalize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedOptionCount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedTallies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferendumMeta",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referendumCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestDecryptAllResults",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createReferendum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decryptAllResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decryptViewTallies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceFinalize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedOptionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedTallies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferendumMeta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referendumCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestDecryptAllResults",
    data: BytesLike
  ): Result;
}

export namespace DataAccessedEvent {
  export type InputTuple = [
    refId: BigNumberish,
    accessor: AddressLike,
    dataType: string
  ];
  export type OutputTuple = [refId: bigint, accessor: string, dataType: string];
  export interface OutputObject {
    refId: bigint;
    accessor: string;
    dataType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferendumCreatedEvent {
  export type InputTuple = [
    refId: BigNumberish,
    title: string,
    deadline: BigNumberish,
    optionsCount: BigNumberish,
    publicResult: boolean
  ];
  export type OutputTuple = [
    refId: bigint,
    title: string,
    deadline: bigint,
    optionsCount: bigint,
    publicResult: boolean
  ];
  export interface OutputObject {
    refId: bigint;
    title: string;
    deadline: bigint;
    optionsCount: bigint;
    publicResult: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferendumFinalizedEvent {
  export type InputTuple = [refId: BigNumberish];
  export type OutputTuple = [refId: bigint];
  export interface OutputObject {
    refId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [refId: BigNumberish, voter: AddressLike];
  export type OutputTuple = [refId: bigint, voter: string];
  export interface OutputObject {
    refId: bigint;
    voter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CryptoReferendum extends BaseContract {
  connect(runner?: ContractRunner | null): CryptoReferendum;
  waitForDeployment(): Promise<this>;

  interface: CryptoReferendumInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  castVote: TypedContractMethod<
    [
      refId: BigNumberish,
      encChoice: BytesLike,
      inputProof: BytesLike,
      plainChoice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  createReferendum: TypedContractMethod<
    [
      title: string,
      description: string,
      options: string[],
      deadline: BigNumberish,
      publicResult: boolean
    ],
    [bigint],
    "nonpayable"
  >;

  decryptAllResults: TypedContractMethod<
    [refId: BigNumberish],
    [bigint[]],
    "view"
  >;

  decryptViewTallies: TypedContractMethod<
    [refId: BigNumberish],
    [string[]],
    "nonpayable"
  >;

  finalize: TypedContractMethod<[refId: BigNumberish], [void], "nonpayable">;

  forceFinalize: TypedContractMethod<
    [refId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEncryptedOptionCount: TypedContractMethod<
    [refId: BigNumberish, optionIndex: BigNumberish],
    [string],
    "view"
  >;

  getEncryptedTallies: TypedContractMethod<
    [refId: BigNumberish],
    [string[]],
    "view"
  >;

  getReferendumMeta: TypedContractMethod<
    [refId: BigNumberish],
    [
      [string, string, string[], bigint, boolean, boolean] & {
        title: string;
        description: string;
        options: string[];
        deadline: bigint;
        finalized: boolean;
        publicResult: boolean;
      }
    ],
    "view"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  referendumCount: TypedContractMethod<[], [bigint], "view">;

  requestDecryptAllResults: TypedContractMethod<
    [refId: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [
      refId: BigNumberish,
      encChoice: BytesLike,
      inputProof: BytesLike,
      plainChoice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createReferendum"
  ): TypedContractMethod<
    [
      title: string,
      description: string,
      options: string[],
      deadline: BigNumberish,
      publicResult: boolean
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decryptAllResults"
  ): TypedContractMethod<[refId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "decryptViewTallies"
  ): TypedContractMethod<[refId: BigNumberish], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "finalize"
  ): TypedContractMethod<[refId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "forceFinalize"
  ): TypedContractMethod<[refId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getEncryptedOptionCount"
  ): TypedContractMethod<
    [refId: BigNumberish, optionIndex: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEncryptedTallies"
  ): TypedContractMethod<[refId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getReferendumMeta"
  ): TypedContractMethod<
    [refId: BigNumberish],
    [
      [string, string, string[], bigint, boolean, boolean] & {
        title: string;
        description: string;
        options: string[];
        deadline: bigint;
        finalized: boolean;
        publicResult: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "referendumCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestDecryptAllResults"
  ): TypedContractMethod<[refId: BigNumberish], [boolean], "nonpayable">;

  getEvent(
    key: "DataAccessed"
  ): TypedContractEvent<
    DataAccessedEvent.InputTuple,
    DataAccessedEvent.OutputTuple,
    DataAccessedEvent.OutputObject
  >;
  getEvent(
    key: "ReferendumCreated"
  ): TypedContractEvent<
    ReferendumCreatedEvent.InputTuple,
    ReferendumCreatedEvent.OutputTuple,
    ReferendumCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ReferendumFinalized"
  ): TypedContractEvent<
    ReferendumFinalizedEvent.InputTuple,
    ReferendumFinalizedEvent.OutputTuple,
    ReferendumFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "DataAccessed(uint256,address,string)": TypedContractEvent<
      DataAccessedEvent.InputTuple,
      DataAccessedEvent.OutputTuple,
      DataAccessedEvent.OutputObject
    >;
    DataAccessed: TypedContractEvent<
      DataAccessedEvent.InputTuple,
      DataAccessedEvent.OutputTuple,
      DataAccessedEvent.OutputObject
    >;

    "ReferendumCreated(uint256,string,uint64,uint256,bool)": TypedContractEvent<
      ReferendumCreatedEvent.InputTuple,
      ReferendumCreatedEvent.OutputTuple,
      ReferendumCreatedEvent.OutputObject
    >;
    ReferendumCreated: TypedContractEvent<
      ReferendumCreatedEvent.InputTuple,
      ReferendumCreatedEvent.OutputTuple,
      ReferendumCreatedEvent.OutputObject
    >;

    "ReferendumFinalized(uint256)": TypedContractEvent<
      ReferendumFinalizedEvent.InputTuple,
      ReferendumFinalizedEvent.OutputTuple,
      ReferendumFinalizedEvent.OutputObject
    >;
    ReferendumFinalized: TypedContractEvent<
      ReferendumFinalizedEvent.InputTuple,
      ReferendumFinalizedEvent.OutputTuple,
      ReferendumFinalizedEvent.OutputObject
    >;

    "VoteCast(uint256,address)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
